options 
{
  BUILD_PARSER=false;
  IGNORE_CASE=false;
   //STATIC = true;
}

PARSER_BEGIN(CS153Assignment5)
public class CS153Assignment5 {
  
  }
PARSER_END(CS153Assignment5)

TOKEN_MGR_DECLS : {
  	static int stringSize;
  	static String comment = "";
  	static String stringLit = "";
    public static void main(String[] args)
    {
      	try
      	{
      	  
      	java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader("input.txt"));
      	StringBuilder sb = new StringBuilder();
		String line = "";
		while((line = br.readLine()) != null)
			sb.append(line+"\r\n");
     	
        java.io.StringReader sr = new java.io.StringReader(sb.toString());
        SimpleCharStream scs = new SimpleCharStream(sr);
        CS153Assignment5TokenManager mgr = new CS153Assignment5TokenManager(scs);
        while (mgr.getNextToken().kind != EOF) {}
        }
     	catch (Exception e)
     	{
			debugStream.println(e);
     	}
    }
}

SPECIAL_TOKEN :
{
  	<SINGLE_LINE_COMMENT:"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  	//{ debugStream.print("COMMENT token: " + matchedToken.image); }
 	| 
  	<STRING_LITERAL:"\"" (~["\n","\r","\""])* ("\""|"\n"|"\r"|"\r\n")>
  	{ debugStream.println("STRING token: " + matchedToken.image); }
}

SKIP :
{
  "/*" : WithinMultiLineComment
}

<WithinMultiLineComment> SKIP :
{
  "*/"
  /*{System.out.println("MULTI-LINE COMMENT = " + comment);comment = "";}*/
   : DEFAULT
}

<WithinMultiLineComment> MORE :
{
  <~[]> {comment += curChar;}
}

SKIP : {
    <IGNORE : [" ","\r","\t","\n"]>
}

TOKEN:
{
    <CHARACTER:
    "'"(["a"-"z", "A"-"Z"]|"\\"|["0"-"9"])"'"
    >  { debugStream.println("CHARACTER token: " + matchedToken.image); }
    |
    <RESERVED: 
    "abstract" | "default" | "goto" | "package" | "synchronized" |
    "assert" | "do" | "if" | "private" | "this" |
    "boolean" | "double" | "implements" | "protected" | "throw" |
    "break" | "else" | "import" | "public" | "throws" |
    "byte" | "enum" | "instanceof" | "return" | "tansient" | 
    "case" | "extends" | "int" | "short" | "true" |
    "catch" | "false" | "interface" | "static" | "try" |
    "char" | "final" | "long" | "strictfp" | "void" |
    "class" | "finally" | "native" | "super" | "volatile" | 
    "const" | "float" | "new" | "switch" | "while" |
    "continue" | "for" | "null"
    >  { debugStream.println("RESERVED token: " + matchedToken.image); }
    |
    <IDENTIFIER: (["a"-"z", "A"-"Z"])(["a"-"z", "A"-"Z", "0"-"9","_"])* >  
   	{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
    |
    <SPECIAL_SYMBOLS: 
    "~" | "!" | "@" | "%" | "^" | "&" | "*" | "-" | "+" | "=" |
    "|" | "/" | ":" | ";" | "?" | "<" | ">" | "." | "," |
    "'" | "\"" | "(" | ")" | "[" | "]" | "{" | "}" |
    "++" | "--" | "<<" | ">>" | "<=" | ">=" | "+=" | "-=" | "*=" | "/=" | 
    "==" | "!=" | "%=" | "&=" | "^=" | "||" | "&&" | "!=" | 
    "<<=" | ">>="
    >
    { debugStream.println("SPECIAL SYMBOL token: " + matchedToken.image); }
    |
    <INTEGER: ["1"-"9"](["0"-"9"])* | //Demcial
    "0"(["0"-"7"])* | //Ocatal
	("0x"|"0X")(["0"-"9"]|["a"-"z", "A"-"Z"])+ > //Hexadecimal
	{ debugStream.println("INTEGER token: " + matchedToken.image); }
  	| 
    <NUMBER:
    (["0"-"9"])+"."(["0"-"9"])+ |
    (["1"-"9"])(["0"-"9"])*["E","e"]["+","-"](["0"-"9"])+|
    (["0"-"9"])+ "." (["0"-"9"]) ["e","E"] | ["+","-"](["0"-"9"])
    >
   	{ debugStream.println("NUMBER token: " + matchedToken.image); }
      
}
